
<!DOCTYPE html>
<html>
<head>
    <title>Web audio: Filter Playground</title>
    <!-- Bootstrap -->
    <link href="css/bootstrap.css" rel="stylesheet"/>
    <link href="css/ui-lightness/jquery-ui-1.9.1.custom.css" rel="stylesheet"/>
    <script type="text/javascript">

        var _gaq = _gaq || [];
        _gaq.push(['_setAccount', 'UA-19067049-1']);
        _gaq.push(['_trackPageview']);

        (function() {
            var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
            ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
            var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
        })();

    </script>
</head>
<body>

<div class="container">

    <h1 class="pagination-centered">Web audio: Filter Playground</h1>

    <ul class="nav nav-list">
        <li class="divider"></li>
    </ul>

    <div class="row">
        <div class="alert alert-info">
            On this page you can experiment with the filters provided by the
            <a href="https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html">Web Audio</a>
            specifications. To run this you need a current build of chrome to work. If you want to
            allow microphone input, make sure you use headphones for output, and you have to enable
            the "Web Audio Input" flag in chrome://flags. For more information on how to get started
            with Web Audio and how this works, look at this
            <a href="http://www.smartjava.org/content/exploring-html5-web-audio-api-filters">article</a>
            on <a href="http://www.smartjava.org">http://www.smartjava.org</a> or contact me on twitter:
            <a href="https://twitter.com/josdirksen" class="twitter-follow-button" data-show-count="false">Follow @josdirksen</a>
            <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
            <a href="https://twitter.com/intent/tweet?screen_name=josdirksen" class="twitter-mention-button" data-related="josdirksen">Tweet to @josdirksen</a>
            <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
        </div>
    </div>

    <div class="row" style="background-color: #eeeeee">

        <div class="span3">
            <h3>1. Enable inputs:</h3>

            <div class="row">
                <div class="span1"><span>Music:</span></div>
                <div class="span2">
                    <div class="btn-toolbar" style="margin-top: -7px; margin-left: 10px">
                        <div class="btn-group">
                            <a class="btn btn-primary" id="music-start" href="#"><i id="music-start-icon"
                                                                                    class="icon-play icon-white"></i></a>
                            <a class="btn btn-primary disabled" id="music-stop" href="#"><i id="music-stop-icon"
                                                                                  class="icon-stop icon-white"></i></a>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="span1"><span>Microphone:</span></div>
                <div class="span2">
                    <div class="btn-toolbar" style="margin-top: -7px; margin-left: 10px">
                        <div class="btn-group">
                            <a class="btn btn-primary" id="mic-start" href="#"><i id="mic-start-icon"
                                                                                  class="icon-play icon-white"></i></a>
                            <a class="btn btn-primary disabled" id="mic-stop" href="#"><i id="mic-stop-icon"
                                                                                class="icon-stop icon-white"></i></a>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="span1"><span>Triangle:</span></div>
                <div class="span2">
                    <div class="btn-toolbar" style="margin-top: -7px; margin-left: 10px">
                        <div class="btn-group">
                            <a class="btn btn-primary" id="sq-start" href="#"><i id="sq-start-icon"
                                                                                 class="icon-play icon-white"></i></a>
                            <a class="btn btn-primary disabled" id="sq-stop" href="#"><i id="sq-stop-icon"
                                                                               class="icon-stop icon-white"></i></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="span6">
            <h3>2. Select and configure the filter:</h3>

            <form class="form-horizontal">
                <div class="control-group">
                    <label class="control-label" for="filterType">Filter type:</label>

                    <div class="controls" >
                        <select name="filterType" id="filterType" style="width: 190px">
                            <option value="0">Lowpass</option>
                            <option value="1">Highpass</option>
                            <option value="2">Bandpass</option>
                            <option value="3" selected>Lowshelf</option>
                            <option value="4">Highshelf</option>
                            <option value="5">Peaking</option>
                            <option value="6">Notch</option>
                            <option value="7">Allpass</option>
                        </select>
                        <span class="label label-info" id="filterInfo">info</span>
                    </div>
                </div>
                <div class="control-group">
                    <label class="control-label" for="frequencyslider">Select frequency:</label>

                    <div class="controls">
                        <div id="frequencyslider-info" style="width: 220px;">
                            <span style="text-align: left; font-size: x-small">20</span>
                            <span style="margin-left: 80px; font-size: x-small" id="currentFreq">20</span>
                            <span style="text-align: right; float: right ;font-size: x-small">20.000</span></span>
                        </div>
                        <div id="frequencyslider" style="width: 220px; margin-top: 0px"></div>

                    </div>
                </div>
                <div class="control-group">
                    <label class="control-label" for="qslider">Select Q-factor:</label>

                    <div class="controls">
                        <div id="qslider-info" style="width: 220px;">
                            <span style="text-align: left; font-size: x-small">0</span>
                            <span style="margin-left: 89px; font-size: x-small" id="currentQfactor">20</span>
                            <span style="text-align: right; float: right ;font-size: x-small">100</span></span>
                        </div>
                        <div id="qslider" style="width: 220px; margin-top: 0px"></div>
                    </div>
                </div>
                <div class="control-group">
                    <label class="control-label" for="gainslider">Select gain:</label>

                    <div class="controls">
                        <div id="gainslider-info" style="width: 220px;">
                            <span style="text-align: left; font-size: x-small">-50</span>
                            <span style="margin-left: 80px; font-size: x-small" id="currentGain">20</span>
                            <span style="text-align: right; float: right ;font-size: x-small">50</span></span>
                        </div>
                        <div id="gainslider" style="width: 220px; margin-top: 0px"></div>
                    </div>

                </div>
            </form>
        </div>
        <div class="span3">
            <h3>3. Enable outputs</h3>
            <div class="row">
                <div class="span1"><span>Speaker:</span></div>
                <div class="span2">
                    <div class="btn-toolbar" style="margin-top: -7px; margin-left: 10px">
                        <div class="btn-group">
                            <a class="btn btn-primary" id="spk-start" href="#"><i id="spk-start-icon"
                                                                                   class="icon-play icon-white"></i></a>
                            <a class="btn btn-primary disabled" id="spk-stop" href="#"><i id="spk-stop-icon"
                                                                                 class="icon-stop icon-white"></i></a>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="span1"><span>Frequencies:</span></div>
                <div class="span2">
                    <div class="btn-toolbar" style="margin-top: -7px; margin-left: 10px">
                        <div class="btn-group">
                            <a class="btn btn-primary" id="freq-start" href="#"><i id="freq-start-icon"
                                                                                   class="icon-play icon-white"></i></a>
                            <a class="btn btn-primary disabled" id="freq-stop" href="#"><i id="freq-stop-icon"
                                                                                           class="icon-stop icon-white"></i></a>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="span1"><span>Spectrogram:</span></div>
                <div class="span2">
                    <div class="btn-toolbar" style="margin-top: -7px; margin-left: 10px">
                        <div class="btn-group">
                            <a class="btn btn-primary" id="spectro-start" href="#"><i id="spectro-start-icon"
                                                                                      class="icon-play icon-white"></i></a>
                            <a class="btn btn-primary disabled" id="spectro-stop" href="#"><i id="spectro-stop-icon"
                                                                                    class="icon-stop icon-white"></i></a>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="span1"><span>Wave:</span></div>
                <div class="span2">
                    <div class="btn-toolbar" style="margin-top: -7px; margin-left: 10px">
                        <div class="btn-group">
                            <a class="btn btn-primary" id="wave-start" href="#"><i id="wave-start-icon"
                                                                                   class="icon-play icon-white"></i></a>
                            <a class="btn btn-primary disabled" id="wave-stop" href="#"><i id="wave-stop-icon"
                                                                                           class="icon-stop icon-white"></i></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <ul class="nav nav-list">
        <li class="divider"></li>
    </ul>

    <div class="row" style="background-color: #eeeeee; padding-top: 10px; padding-bottom: 10px">
        <div class="row">
            <div class="span12"><h3 style="margin-left: 20px">4. View the output:</h3></div>
        </div>
        <div class="row">
            <div class="span4 " >
                Frequencies:
                <canvas id="spectrum" width="300" height="256"
                style="display: block; background-color: black ;"></canvas>
            </div>
            <div class="span4 ">
                Spectrogram:
                <canvas id="spectrogram" width="300" height="256"
                        style="display: block; background-color: black ;"></canvas>
            </div>
            <div class="span4">
                Waveform:
                <canvas id="wave" width="300" height="256"
                        style="display: block; background-color: black ;"></canvas>
            </div>

        </div>
    </div>

    <ul class="nav nav-list">
        <li class="divider"></li>
    </ul>
</div>

<script src="js/jquery-1.8.2.js"></script>
<script src="js/jquery-ui-1.9.1.custom.js"></script>
<script src="js/bootstrap.min.js"></script>
<script src="js/chroma.js"></script>
<script>

// some globals
var context = new webkitAudioContext();
var audioBuffer;
var sourceNode;
var mediaStreamSource;



var osc = context.createOscillator();

var filter = context.createBiquadFilter();
filter.type = 3;
filter.frequency.value = 440;
filter.Q.value = 0;
filter.gain.value = 0;


// state variables
var analyserRunning = false;
var spectrumRunning = false;
var waveRunning = false;
var musicRunning = false;
var micRunning = false;
var sqRunning = false;

// setup a javascript node
var javascriptNode = context.createJavaScriptNode(2048, 1, 1);

// connect to destination, else it isn't called
javascriptNode.connect(context.destination);
// when the javascript node is called
// we use information from the analyzer node
// to draw the volume
javascriptNode.onaudioprocess = function () {

    // get the average for the first channel
    var array = new Uint8Array(analyser.frequencyBinCount);
    analyser.getByteFrequencyData(array);

    // draw the spectrogram
    if ((musicRunning || micRunning || sqRunning)
            && analyserRunning) {
        drawSpectrogram(array);
    }

    if ((musicRunning || micRunning || sqRunning)
            && spectrumRunning) {
        drawSpectrum(array);
    }

    if ((musicRunning || micRunning || sqRunning)
            && waveRunning) {
        var array2 = new Uint8Array(analyser.frequencyBinCount);
        analyser.getByteTimeDomainData(array2)


        drawWave(array2);
    }



}

// setup a analyzer
var analyser = context.createAnalyser();
analyser.smoothingTimeConstant = 0;
analyser.fftSize = 512;

// create a buffer source node
filter.connect(analyser);
analyser.connect(javascriptNode);

// get the context from the canvas to draw on
var ctx = $("#spectrogram").get()[0].getContext("2d");

// create a temp canvas we use for copying
var tempCanvas = document.createElement("canvas");
tempCanvas.width = 460;
tempCanvas.height = 300;
var tempCtx = tempCanvas.getContext("2d");

// used for color distribution
var hot = new chroma.ColorScale({
    colors:['#000000', '#ff0000', '#ffff00', '#ffffff'],
    positions:[0, .25, .75, 1],
    mode:'rgb',
    limits:[0, 350]
});

$(document).ready(function () {
    setupHandlers();
    loadSound("wagner-short.ogg");
});

function setupSourceAudio() {
    // create a buffer source node
    sourceNode = context.createBufferSource();

    sourceNode.connect(filter);
    //filter.connect(context.destination);

    // and connect to destination
    //sourceNode.connect(context.destination);
}

function setupHandlers() {
    $("#music-start").click(function () {
        setupSourceAudio();
        sourceNode.buffer = audioBuffer;
        sourceNode.start(0);
        sourceNode.loop = true;
        musicRunning=true;

        $("#music-start").addClass("disabled");
        $("#music-stop").removeClass("disabled");

    });

    $("#music-stop").click(function () {
        sourceNode.stop(0);

        musicRunning = false;
        $("#music-stop").addClass("disabled");
        $("#music-start").removeClass("disabled");
    });

    $("#sq-start").click(function () {
        osc.frequency.value=600;
        osc.type=2;
        osc.connect(filter);
        osc.start(0);


        sqRunning=true;

        $("#sq-stop").removeClass("disabled");
        $("#sq-start").addClass("disabled");
    });

    $("#sq-stop").click(function () {
        osc.stop(0);
        osc.disconnect(filter);

        sqRunning=false;

        $("#sq-stop").addClass("disabled");
        $("#sq-start").removeClass("disabled");
    });


    $("#mic-start").click(function () {
        navigator.webkitGetUserMedia({audio:true},function(stream) {
            mediaStreamSource = context.createMediaStreamSource(stream);
            mediaStreamSource.connect(filter);

            micRunning = true;
            $("#mic-start").addClass("disabled");
            $("#mic-stop").removeClass("disabled");
        });



    });

    $("#mic-stop").click(function () {
        mediaStreamSource.disconnect(filter);
        micRunning = false;


        $("#mic-stop").addClass("disabled");
        $("#mic-start").removeClass("disabled");
    });




    $("#spectro-start").click(function () {

        analyserRunning = true;

        $("#spectro-start").addClass("disabled");
        $("#spectro-stop").removeClass("disabled");
    });

    $("#spectro-stop").click(function () {
        analyserRunning = false;

        $("#spectro-start").removeClass("disabled");
        $("#spectro-stop").addClass("disabled");
    });

    $("#freq-start").click(function() {

        spectrumRunning = true;
        $("#freq-start").addClass("disabled");
        $("#freq-stop").removeClass("disabled");

    });

    $("#freq-stop").click(function() {

        spectrumRunning = false;
        $("#freq-start").removeClass("disabled");
        $("#freq-stop").addClass("disabled");
    });


    $("#wave-start").click(function() {

        waveRunning = true;
        $("#wave-start").addClass("disabled");
        $("#wave-stop").removeClass("disabled");

    });

    $("#wave-stop").click(function() {

        waveRunning = false;
        $("#wave-start").removeClass("disabled");
        $("#wave-stop").addClass("disabled");
    });

    $("#spk-start").click(function() {

        filter.connect(context.destination);
        $("#spk-start").addClass("disabled");
        $("#spk-stop").removeClass("disabled");

    });

    $("#spk-stop").click(function() {

        filter.disconnect(context.destination);
        filter.connect(analyser);
        $("#spk-start").removeClass("disabled");
        $("#spk-stop").addClass("disabled");
    });



    $("#gainslider").slider({
        min:-50,
        max:50,
        value:0,
        slide:refreshGain
    });

    $("#qslider").slider({
        min:0,
        max:100,
        value:0,
        slide:refreshQFactor
    });

    $("#frequencyslider").slider({
        min:20,
        max:20000,
        value:440,
        slide:refreshFrequency
    });

    $("#filterType").change(refreshFilterType);
    $("#filterType").val(3);
    refreshFilterType();
    refreshFrequency();
    refreshGain();
    refreshQFactor();
}


function refreshFilterType() {
    var currentFilterType = $("#filterType").val();
    var asText = $("#filterType option:selected").text();
    var value = "";

    switch (parseInt(currentFilterType)) {
        case 0:
            value = ("A lowpass filter allows frequencies below the cutoff frequency to pass through and attenuates frequencies above the cutoff. LOWPASS implements a standard second-order resonant lowpass filter with 12dB/octave rolloff.<br/><br/>" +
                    "<strong>Frequency</strong>: The cutoff frequency above which the frequencies are attenuated<br/>" +
                    "<strong>Q</strong>: Controls how peaked the response will be at the cutoff frequency. A large value makes the response more peaked.<br/>" +
                    "<strong>Gain</strong>: Not used in this filter type");
            break;
        case 1:
            value = ("A highpass filter is the opposite of a lowpass filter. Frequencies above the cutoff frequency are passed through, but frequencies below the cutoff are attenuated. HIGHPASS implements a standard second-order resonant highpass filter with 12dB/octave rolloff. <br/><br/>" +
                    "<strong>Frequency</strong>: The cutoff frequency above which the frequencies are attenuated<br/>" +
                    "<strong>Q</strong>: Controls how peaked the response will be at the cutoff frequency. A large value makes the response more peaked.<br/>" +
                    "<strong>Gain</strong>: Not used in this filter type");
            break;
        case 2:
            value = ("A bandpass filter allows a range of frequencies to pass through and attenuates the frequencies below and above this frequency range. BANDPASS implements a second-order bandpass filter.<br/><br/>" +
                    "<strong>Frequency</strong>: The center of the frequency band<br/>" +
                    "<strong>Q</strong>: Controls the width of the band. The width becomes narrower as the Q value increases.<br/>" +
                    "<strong>Gain</strong>: Not used in this filter type");
            break;
        case 3:
            value = ("The lowshelf filter allows all frequencies through, but adds a boost (or attenuation) to the lower frequencies. LOWSHELF implements a second-order lowshelf filter.<br/><br/>" +
                    "<strong>Frequency</strong>: The cutoff frequency above which the frequencies are attenuated<br/>" +
                    "<strong>Q</strong>: Not used in this filter type.<br/>" +
                    "<strong>Gain</strong>: The boost, in dB, to be applied. If the value is negative, the frequencies are attenuated.");
            break;
        case 4:
            value = ("The highshelf filter is the opposite of the lowshelf filter and allows all frequencies through, but adds a boost to the higher frequencies. HIGHSHELF implements a second-order highshelf filter<br/><br/>" +
                    "<strong>Frequency</strong>: The lower limit of the frequences where the boost (or attenuation) is applied.<br/>" +
                    "<strong>Q</strong>: Not used in this filter type.<br/>" +
                    "<strong>Gain</strong>: The boost, in dB, to be applied. If the value is negative, the frequencies are attenuated.");
            break;
        case 5:
            value = ("The peaking filter allows all frequencies through, but adds a boost (or attenuation) to a range of frequencies.<br/><br/>" +
                    "<strong>Frequency</strong>: The center frequency of where the boost is applied.<br/>" +
                    "<strong>Q</strong>: Controls the width of the band of frequencies that are boosted. A large value implies a narrow width.<br/>" +
                    "<strong>Gain</strong>: The boost, in dB, to be applied. If the value is negative, the frequencies are attenuated.");
            break;
        case 6:
            value = ("The notch filter (also known as a band-stop or band-rejection filter) is the opposite of a bandpass filter. It allows all frequencies through, except for a set of frequencies.<br/><br/>" +
                    "<strong>Frequency</strong>: The center frequency of where the notch is applied.<br/>" +
                    "<strong>Q</strong>: Controls the width of the band of frequencies that are attenuated. A large value implies a narrow width.<br/>" +
                    "<strong>Gain</strong>: Not used in this filter type");
            break;
        case 7:
            value = ("An allpass filter allows all frequencies through, but changes the phase relationship between the various frequencies. ALLPASS implements a second-order allpass filter.<br/><br/>" +
                    "<strong>Frequency</strong>: The frequency where the center of the phase transition occurs. Viewed another way, this is the frequency with maximal group delay.<br/>" +
                    "<strong>Q</strong>: Controls how sharp the phase transition is at the center frequency. A larger value implies a sharper transition and a larger group delay.<br/>" +
                    "<strong>Gain</strong>: Not used in this filter type");
            break;
    };

//    $("#filterInfo").tooltip({
//        title: value,
//        html: true,
//        placement: "bottom"
//    });


    $("#filterInfo").popover('destroy');
    $("#filterInfo").popover({
        title: asText + " filter info:",
        content: value,
        html: true,
        placement: "bottom",
        trigger: "hover"
    });

    // and update the filter type
    filter.type = currentFilterType;
}

function refreshFrequency() {

    var frequency = parseInt($('#frequencyslider').slider("value"));

    $("#currentFreq").text("(" + frequency + " Hz)");
    filter.frequency.value = frequency;

}

function refreshGain() {
    var gain = parseInt($('#gainslider').slider("value"));

    $("#currentGain").text("(" + gain + ")");
    filter.gain.value = gain;
}

function refreshQFactor() {
    var q = parseInt($('#qslider').slider("value"));

    $("#currentQfactor").text("(" + q + ")");
    filter.Q.value = q;
}

// load the specified sound
function loadSound(url) {
    var request = new XMLHttpRequest();
    request.open('GET', url, true);
    request.responseType = 'arraybuffer';

    // When loaded decode the data
    request.onload = function () {

        // decode the data
        context.decodeAudioData(request.response, function (buffer) {
            // when the audio is decoded play the sound
            audioBuffer = buffer;
        }, onError);
    }
    request.send();
}

function playSound(buffer) {
    sourceNode.buffer = buffer;
    sourceNode.noteOn(0);
}

// log if an error occurs
function onError(e) {
    console.log(e);
}

function drawSpectrum(array) {
    var ctx = $("#spectrum").get()[0].getContext("2d");
    ctx.fillStyle = "#ffffff"
    ctx.clearRect(0, 0, 300, 256);


    for ( var i = 0; i < (array.length); i++ ){
        var value = array[i];

        ctx.fillRect(i*2,300-value,1,300);
    }
};

function drawWave(array) {

    var ctx = $("#wave").get()[0].getContext("2d");
    ctx.fillStyle = "#ffffff"
    ctx.clearRect(0, 0, 300, 256);

    for ( var i = 0; i < (array.length); i++ ){
        var value = array[i];

        ctx.fillRect(i+22,256-value,1,1);
    }
};

function drawSpectrogram(array) {

    // copy the current canvas onto the temp canvas
    var canvas = document.getElementById("spectrogram");

    tempCtx.drawImage(canvas, 0, 0, 300, 256);

    // iterate over the elements from the array
    for (var i = 0; i < array.length; i++) {
        // draw each pixel with the specific color
        var value = array[i];
        ctx.fillStyle = hot.getColor(value).hex();

        // draw the line at the right side of the canvas
        ctx.fillRect(300 - 1, 256 - i, 1, 1);
    }

    // set translate on the canvas
    ctx.translate(-1, 0);
    // draw the copied image
    ctx.drawImage(spectrogram, 0, 0, 300, 256, 0, 0, 300, 256);

    // reset the transformation matrix
    ctx.setTransform(1, 0, 0, 1, 0, 0);

}

</script>
</body>
</html>